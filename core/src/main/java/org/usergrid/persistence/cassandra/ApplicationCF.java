/*******************************************************************************
 * Copyright (c) 2010, 2011 Ed Anuff and Usergrid, all rights reserved.
 * http://www.usergrid.com
 * 
 * This file is part of Usergrid Core.
 * 
 * Usergrid Core is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * Usergrid Core is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * Usergrid Core. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package org.usergrid.persistence.cassandra;

import static me.prettyprint.hector.api.ddl.ComparatorType.COUNTERTYPE;
import static org.usergrid.persistence.cassandra.CassandraPersistenceUtils.getIndexMetadata;

import java.util.List;

import me.prettyprint.hector.api.ddl.ColumnDefinition;

// Auto-generated by ApplicationCFGenerator

public enum ApplicationCF implements CFEnum {

	ENTITY_PROPERTIES("Entity_Properties", "BytesType"),

	ENTITY_DICTIONARIES("Entity_Dictionaries", "BytesType"),

	ENTITY_ID_SETS("Entity_Id_Sets", "UUIDType"),

	ENTITY_COMPOSITE_DICTIONARIES(
			"Entity_Composite_Dictionaries",
			"DynamicCompositeType(a=>AsciiType,b=>BytesType,i=>IntegerType,x=>LexicalUUIDType,l=>LongType,t=>TimeUUIDType,s=>UTF8Type,u=>UUIDType,A=>AsciiType(reversed=true),B=>BytesType(reversed=true),I=>IntegerType(reversed=true),X=>LexicalUUIDType(reversed=true),L=>LongType(reversed=true),T=>TimeUUIDType(reversed=true),S=>UTF8Type(reversed=true),U=>UUIDType(reversed=true))"),

	ENTITY_METADATA("Entity_Metadata", "BytesType"),

	ENTITY_ALIASES("Entity_Aliases", "BytesType", null,
			"entityId,entityType:BytesType,aliasType:BytesType,alias:UTF8Type"),

	ENTITY_CONNECTIONS("Entity_Connections", "BytesType", null,
			ConnectionRefImpl.getIndexes()),

	ENTITY_INDEX(
			"Entity_Index",
			"DynamicCompositeType(a=>AsciiType,b=>BytesType,i=>IntegerType,x=>LexicalUUIDType,l=>LongType,t=>TimeUUIDType,s=>UTF8Type,u=>UUIDType,A=>AsciiType(reversed=true),B=>BytesType(reversed=true),I=>IntegerType(reversed=true),X=>LexicalUUIDType(reversed=true),L=>LongType(reversed=true),T=>TimeUUIDType(reversed=true),S=>UTF8Type(reversed=true),U=>UUIDType(reversed=true))"),

	ENTITY_INDEX_ENTRIES(
			"Entity_Index_Entries",
			"DynamicCompositeType(a=>AsciiType,b=>BytesType,i=>IntegerType,x=>LexicalUUIDType,l=>LongType,t=>TimeUUIDType,s=>UTF8Type,u=>UUIDType,A=>AsciiType(reversed=true),B=>BytesType(reversed=true),I=>IntegerType(reversed=true),X=>LexicalUUIDType(reversed=true),L=>LongType(reversed=true),T=>TimeUUIDType(reversed=true),S=>UTF8Type(reversed=true),U=>UUIDType(reversed=true))"),

	APPLICATION_ROLES("Application_Roles", "BytesType"),

	APPLICATION_AGGREGATE_COUNTERS("Application_Aggregate_Counters",
			"LongType", COUNTERTYPE.getClassName()),

	ENTITY_COUNTERS("Entity_Counters", "BytesType", COUNTERTYPE.getClassName()),

	;
	public final static String DEFAULT_DYNAMIC_COMPOSITE_ALIASES = "(a=>AsciiType,b=>BytesType,i=>IntegerType,x=>LexicalUUIDType,l=>LongType,t=>TimeUUIDType,s=>UTF8Type,u=>UUIDType,A=>AsciiType(reversed=true),B=>BytesType(reversed=true),I=>IntegerType(reversed=true),X=>LexicalUUIDType(reversed=true),L=>LongType(reversed=true),T=>TimeUUIDType(reversed=true),S=>UTF8Type(reversed=true),U=>UUIDType(reversed=true))";

	private final String cf;
	private final String comparator;
	private final String validator;
	private final String indexes;
	private final boolean create;

	ApplicationCF(String cf, String comparator) {
		this.cf = cf;
		this.comparator = comparator;
		validator = null;
		indexes = null;
		create = true;
	}

	ApplicationCF(String cf, String comparator, String validator) {
		this.cf = cf;
		this.comparator = comparator;
		this.validator = validator;
		indexes = null;
		create = true;
	}

	ApplicationCF(String cf, String comparator, String validator, String indexes) {
		this.cf = cf;
		this.comparator = comparator;
		this.validator = validator;
		this.indexes = indexes;
		create = true;
	}

	@Override
	public String toString() {
		return cf;
	}

	@Override
	public String getColumnFamily() {
		return cf;
	}

	@Override
	public String getComparator() {
		return comparator;
	}

	@Override
	public String getValidator() {
		return validator;
	}

	@Override
	public boolean isComposite() {
		return comparator.startsWith("DynamicCompositeType");
	}

	@Override
	public List<ColumnDefinition> getMetadata() {
		return getIndexMetadata(indexes);
	}

	@Override
	public boolean create() {
		return create;
	}

}
